// Code generated by mockery v2.43.2. DO NOT EDIT.

package interfaces

import (
	Registration "github.com/TaBSRest/GoFac/internal/Registration"

	mock "github.com/stretchr/testify/mock"

	reflect "reflect"
)

// ContainerBuilder is an autogenerated mock type for the ContainerBuilder type
type ContainerBuilder struct {
	mock.Mock
}

type ContainerBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *ContainerBuilder) EXPECT() *ContainerBuilder_Expecter {
	return &ContainerBuilder_Expecter{mock: &_m.Mock}
}

// GetGroupedRegistrations provides a mock function with given fields: name
func (_m *ContainerBuilder) GetGroupedRegistrations(name string) ([]*Registration.Registration, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupedRegistrations")
	}

	var r0 []*Registration.Registration
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*Registration.Registration, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []*Registration.Registration); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Registration.Registration)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerBuilder_GetGroupedRegistrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupedRegistrations'
type ContainerBuilder_GetGroupedRegistrations_Call struct {
	*mock.Call
}

// GetGroupedRegistrations is a helper method to define mock.On call
//   - name string
func (_e *ContainerBuilder_Expecter) GetGroupedRegistrations(name interface{}) *ContainerBuilder_GetGroupedRegistrations_Call {
	return &ContainerBuilder_GetGroupedRegistrations_Call{Call: _e.mock.On("GetGroupedRegistrations", name)}
}

func (_c *ContainerBuilder_GetGroupedRegistrations_Call) Run(run func(name string)) *ContainerBuilder_GetGroupedRegistrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContainerBuilder_GetGroupedRegistrations_Call) Return(_a0 []*Registration.Registration, _a1 error) *ContainerBuilder_GetGroupedRegistrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContainerBuilder_GetGroupedRegistrations_Call) RunAndReturn(run func(string) ([]*Registration.Registration, error)) *ContainerBuilder_GetGroupedRegistrations_Call {
	_c.Call.Return(run)
	return _c
}

// GetNamedRegistration provides a mock function with given fields: name
func (_m *ContainerBuilder) GetNamedRegistration(name string) (*Registration.Registration, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetNamedRegistration")
	}

	var r0 *Registration.Registration
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Registration.Registration, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *Registration.Registration); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Registration.Registration)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerBuilder_GetNamedRegistration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNamedRegistration'
type ContainerBuilder_GetNamedRegistration_Call struct {
	*mock.Call
}

// GetNamedRegistration is a helper method to define mock.On call
//   - name string
func (_e *ContainerBuilder_Expecter) GetNamedRegistration(name interface{}) *ContainerBuilder_GetNamedRegistration_Call {
	return &ContainerBuilder_GetNamedRegistration_Call{Call: _e.mock.On("GetNamedRegistration", name)}
}

func (_c *ContainerBuilder_GetNamedRegistration_Call) Run(run func(name string)) *ContainerBuilder_GetNamedRegistration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ContainerBuilder_GetNamedRegistration_Call) Return(_a0 *Registration.Registration, _a1 error) *ContainerBuilder_GetNamedRegistration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContainerBuilder_GetNamedRegistration_Call) RunAndReturn(run func(string) (*Registration.Registration, error)) *ContainerBuilder_GetNamedRegistration_Call {
	_c.Call.Return(run)
	return _c
}

// GetPerContextRegistrations provides a mock function with given fields:
func (_m *ContainerBuilder) GetPerContextRegistrations() []*Registration.Registration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPerContextRegistrations")
	}

	var r0 []*Registration.Registration
	if rf, ok := ret.Get(0).(func() []*Registration.Registration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Registration.Registration)
		}
	}

	return r0
}

// ContainerBuilder_GetPerContextRegistrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPerContextRegistrations'
type ContainerBuilder_GetPerContextRegistrations_Call struct {
	*mock.Call
}

// GetPerContextRegistrations is a helper method to define mock.On call
func (_e *ContainerBuilder_Expecter) GetPerContextRegistrations() *ContainerBuilder_GetPerContextRegistrations_Call {
	return &ContainerBuilder_GetPerContextRegistrations_Call{Call: _e.mock.On("GetPerContextRegistrations")}
}

func (_c *ContainerBuilder_GetPerContextRegistrations_Call) Run(run func()) *ContainerBuilder_GetPerContextRegistrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ContainerBuilder_GetPerContextRegistrations_Call) Return(_a0 []*Registration.Registration) *ContainerBuilder_GetPerContextRegistrations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ContainerBuilder_GetPerContextRegistrations_Call) RunAndReturn(run func() []*Registration.Registration) *ContainerBuilder_GetPerContextRegistrations_Call {
	_c.Call.Return(run)
	return _c
}

// GetRegistrationsFor provides a mock function with given fields: registrationType
func (_m *ContainerBuilder) GetRegistrationsFor(registrationType reflect.Type) ([]*Registration.Registration, bool) {
	ret := _m.Called(registrationType)

	if len(ret) == 0 {
		panic("no return value specified for GetRegistrationsFor")
	}

	var r0 []*Registration.Registration
	var r1 bool
	if rf, ok := ret.Get(0).(func(reflect.Type) ([]*Registration.Registration, bool)); ok {
		return rf(registrationType)
	}
	if rf, ok := ret.Get(0).(func(reflect.Type) []*Registration.Registration); ok {
		r0 = rf(registrationType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Registration.Registration)
		}
	}

	if rf, ok := ret.Get(1).(func(reflect.Type) bool); ok {
		r1 = rf(registrationType)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ContainerBuilder_GetRegistrationsFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegistrationsFor'
type ContainerBuilder_GetRegistrationsFor_Call struct {
	*mock.Call
}

// GetRegistrationsFor is a helper method to define mock.On call
//   - registrationType reflect.Type
func (_e *ContainerBuilder_Expecter) GetRegistrationsFor(registrationType interface{}) *ContainerBuilder_GetRegistrationsFor_Call {
	return &ContainerBuilder_GetRegistrationsFor_Call{Call: _e.mock.On("GetRegistrationsFor", registrationType)}
}

func (_c *ContainerBuilder_GetRegistrationsFor_Call) Run(run func(registrationType reflect.Type)) *ContainerBuilder_GetRegistrationsFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reflect.Type))
	})
	return _c
}

func (_c *ContainerBuilder_GetRegistrationsFor_Call) Return(_a0 []*Registration.Registration, _a1 bool) *ContainerBuilder_GetRegistrationsFor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ContainerBuilder_GetRegistrationsFor_Call) RunAndReturn(run func(reflect.Type) ([]*Registration.Registration, bool)) *ContainerBuilder_GetRegistrationsFor_Call {
	_c.Call.Return(run)
	return _c
}

// NewContainerBuilder creates a new instance of ContainerBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContainerBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContainerBuilder {
	mock := &ContainerBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
